apply plugin: 'java'
apply plugin: 'war'

defaultTasks 'clean', 'explodedWar', 'buildFrontend', 'copyFrontend'

project.buildDir = '.build'

sourceSets {
    main {
        java {
            srcDir 'backend/src'
            outputDir = file('backend/build/classes')
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    compileOnly 'org.apache.tomcat:tomcat-servlet-api:8.5.27'
    compileOnly 'org.apache.tomcat:tomcat-jsp-api:8.5.27'
    compileOnly 'org.apache.tomcat:tomcat-annotations-api:8.5.27'
    
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.springframework:spring-core:5.0.3.RELEASE'
    compile 'org.springframework:spring-webmvc:5.0.3.RELEASE'
    compile 'org.springframework:spring-web:5.0.3.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    compile 'mysql:mysql-connector-java:6.0.6'
    compile 'commons-dbutils:commons-dbutils:1.7'
    compile 'com.zaxxer:HikariCP:2.7.2'
    compile 'org.apache.pdfbox:pdfbox:2.0.8'
    compile 'org.apache.pdfbox:fontbox:2.0.8'
}

task cleanExtra(type: Delete) {
    delete 'dist'
}

clean.dependsOn('cleanExtra')

task explodedWar(type: Copy) {
    into 'dist'
    with war
}

task npmInstall(type: Exec) {
    workingDir 'frontend'
    if (System.getProperty('os.name').toUpperCase().contains('WINDOWS')){
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine 'npm', 'install'
    }
}

task buildFrontend() { 
    dependsOn npmInstall
    doLast {
        exec {
            workingDir 'frontend'
            if (System.getProperty('os.name').toUpperCase().contains('WINDOWS')){
                commandLine 'ng.cmd', 'build', '-prod'
            } else {
                commandLine 'ng', 'build', '-prod'
            }
        }
    }
}

task copyFrontend(type: Copy) {
    into 'dist'
    from 'frontend/dist'
}

war {
    destinationDir = file('dist')

    webInf {
        from('backend/WebContent/WEB-INF') {
            include '*'
            exclude 'application.properties'
        }

        from('conf') {
            include 'application.properties'
        }

        from('src') {
            into 'classes'
            exclude '**/*.java'
        }
    }
}

task deleteLibs(type: Delete) {
    delete fileTree('backend/WebContent/WEB-INF/lib') {
        include '**/*'
    }
}

task copyLibs(type: Copy) {
    into 'backend/WebContent/WEB-INF/lib'
    from configurations.runtime
}

